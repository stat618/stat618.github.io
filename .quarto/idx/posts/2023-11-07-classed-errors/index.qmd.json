{"title":"Classed conditions from rlang functions","markdown":{"yaml":{"title":"Classed conditions from rlang functions","description":"Improve your testing, your control flow, your programming life.","author":[{"name":"Mike Mahoney","url":{}}],"date":"2023-11-07","categories":["R","Tutorials"],"image":"banner.jpg","format":{"html":{"toc":true}},"engine":"knitr"},"containsRefs":false,"markdown":"\n\nI'm a huge fan of the condition functions from rlang -- `rlang::inform()` for sending messages, `rlang::warn()` for warnings, and `rlang::abort()` for errors. Compared to their base equivalents (`message()`, `warning()`, and `stop()`, respectively) these functions [are extremely flexible](https://rlang.r-lib.org/reference/topic-condition-customisation.html) and make it easy to specify [which user-facing function actually caused the condition](https://rlang.r-lib.org/reference/topic-error-call.html). And recently I've become a huge fan of how these functions let you easily set the class of your conditions, which makes it a lot easier to implement logic to handle these conditions.\n\nFor instance, let's say we've got some function that sends up a warning if you give it an unexpected input:\n\n```{r}\nf1 <- function(x) {\n  if (!is.numeric(x)) {\n    rlang::warn(\n      \"`x` wasn't numeric. Was this expected?\"\n    )\n  }\n  mean(x)\n}\nf1(TRUE)\n```\n\nIf we know that we're going to be passing unexpected inputs to this function, we might consider using `suppressWarnings()` to hide this warning. I do this every so often in package code, where I know my inputs to another function are going to trigger a condition that I don't need the user to see:^[For instance, the way that `autoplot()` in spatialsample [adds grids to spatial_block_cv() plots](https://github.com/tidymodels/spatialsample/blob/a8834bbe646967bc224cf5e558789e1d704b0778/R/autoplot.R#L141-L143) always triggers the same message, which is expected and not worth worrying about. I hide that message so my users don't need to be concerned.]\n\n```{r}\nsuppressWarnings(f1(TRUE))\n```\n\nThe challenge with this is that `suppressWarnings()`, used this way, is a blunt tool that hides _all_ warnings sent up by this function. For instance, if we passed a character vector as input to this function, we'd also trigger a warning from `mean()` that it's going to return NA:\n\n```{r}\nf1(\"a\")\n```\n\nAnd that useful warning _also_ gets hidden by the `suppressWarnings()` call:\n\n```{r}\nsuppressWarnings(f1(\"a\"))\n```\n\nAdding a subclass to our warning helps solve this. By specifying the `class` argument in any of the rlang condition functions, we're able to easily subclass our warning. This doesn't change how the warning displays during standard usage:\n\n```{r}\nf2 <- function(x) {\n  if (!is.numeric(x)) {\n    rlang::warn(\n      \"`x` wasn't numeric. Was this expected?\",\n      class = \"non_numeric_x\"\n    )\n  }\n  mean(x)\n}\nf2(TRUE)\n```\n\nBut it _does_ mean that we can now use the `classes` argument to `suppressWarnings()` to only supress the warnings we care about, without accidentally hiding other unexpected warnings we might trigger:\n\n```{r}\nsuppressWarnings(f2(\"a\"), classes = \"non_numeric_x\")\n```\n\nThis is great, and makes it a lot easier to incorporate conditions into your program's control flow. For instance, we can use these classed warnings with `tryCatch()` or `rlang::try_fetch()` to \"catch\" conditions, perhaps running a cleanup script or fallback method in the event that a specific classed warning is returned:^[I don't currently, but I _should_ do this in terrainr, where I [currently assume that any error during `merge_rasters()` can be fixed by the fallback method.](https://github.com/ropensci/terrainr/blob/36fc069cb05dbcb44ff358858f5544863d506aee/R/merge_rasters.R#L58-L81)]\n\n```{r}\nrlang::try_fetch(\n  f2(\"a\"),\n  non_numeric_x = function(...) \"We're running a completely different function now!\"\n)\n```\n\nLast but not least, classed errors help in package testing. A huge number of my tests are designed to make sure that conditions fire when they're supposed to -- bad inputs trigger errors, concerning outputs trigger warnings and so on. Using classed errors can help me make sure I'm triggering the error or warning that I want to, not just any random error or warning that might be lurking in my code.\n\nIf you're [using testthat's 3rd edition](https://testthat.r-lib.org/articles/third-edition.html), the `expect_condition()` set of functions (including `expect_message()`, `expect_warning()`, `expect_error()`) all share a `class` argument which will make sure the warning or error you're triggering is actually the one you expect:\n\n```{r}\ntestthat::local_edition(3)\ntestthat::expect_warning(f2(TRUE), class = \"non_numeric_x\")\n```\n\nIf our condition class doesn't match the expected class, these tests will fail:\n\n```{r}\ntry(testthat::expect_warning(f2(TRUE), class = \"wrong_class\"))\n```\n\nI'm a late adopter of classed conditions, only really systematically adopting them for [the new rsi package](https://github.com/Permian-Global-Research/rsi), but I've found them super useful so far and am planning to slowly use them more and more in the rest of my packages over time!\n","srcMarkdownNoYaml":"\n\nI'm a huge fan of the condition functions from rlang -- `rlang::inform()` for sending messages, `rlang::warn()` for warnings, and `rlang::abort()` for errors. Compared to their base equivalents (`message()`, `warning()`, and `stop()`, respectively) these functions [are extremely flexible](https://rlang.r-lib.org/reference/topic-condition-customisation.html) and make it easy to specify [which user-facing function actually caused the condition](https://rlang.r-lib.org/reference/topic-error-call.html). And recently I've become a huge fan of how these functions let you easily set the class of your conditions, which makes it a lot easier to implement logic to handle these conditions.\n\nFor instance, let's say we've got some function that sends up a warning if you give it an unexpected input:\n\n```{r}\nf1 <- function(x) {\n  if (!is.numeric(x)) {\n    rlang::warn(\n      \"`x` wasn't numeric. Was this expected?\"\n    )\n  }\n  mean(x)\n}\nf1(TRUE)\n```\n\nIf we know that we're going to be passing unexpected inputs to this function, we might consider using `suppressWarnings()` to hide this warning. I do this every so often in package code, where I know my inputs to another function are going to trigger a condition that I don't need the user to see:^[For instance, the way that `autoplot()` in spatialsample [adds grids to spatial_block_cv() plots](https://github.com/tidymodels/spatialsample/blob/a8834bbe646967bc224cf5e558789e1d704b0778/R/autoplot.R#L141-L143) always triggers the same message, which is expected and not worth worrying about. I hide that message so my users don't need to be concerned.]\n\n```{r}\nsuppressWarnings(f1(TRUE))\n```\n\nThe challenge with this is that `suppressWarnings()`, used this way, is a blunt tool that hides _all_ warnings sent up by this function. For instance, if we passed a character vector as input to this function, we'd also trigger a warning from `mean()` that it's going to return NA:\n\n```{r}\nf1(\"a\")\n```\n\nAnd that useful warning _also_ gets hidden by the `suppressWarnings()` call:\n\n```{r}\nsuppressWarnings(f1(\"a\"))\n```\n\nAdding a subclass to our warning helps solve this. By specifying the `class` argument in any of the rlang condition functions, we're able to easily subclass our warning. This doesn't change how the warning displays during standard usage:\n\n```{r}\nf2 <- function(x) {\n  if (!is.numeric(x)) {\n    rlang::warn(\n      \"`x` wasn't numeric. Was this expected?\",\n      class = \"non_numeric_x\"\n    )\n  }\n  mean(x)\n}\nf2(TRUE)\n```\n\nBut it _does_ mean that we can now use the `classes` argument to `suppressWarnings()` to only supress the warnings we care about, without accidentally hiding other unexpected warnings we might trigger:\n\n```{r}\nsuppressWarnings(f2(\"a\"), classes = \"non_numeric_x\")\n```\n\nThis is great, and makes it a lot easier to incorporate conditions into your program's control flow. For instance, we can use these classed warnings with `tryCatch()` or `rlang::try_fetch()` to \"catch\" conditions, perhaps running a cleanup script or fallback method in the event that a specific classed warning is returned:^[I don't currently, but I _should_ do this in terrainr, where I [currently assume that any error during `merge_rasters()` can be fixed by the fallback method.](https://github.com/ropensci/terrainr/blob/36fc069cb05dbcb44ff358858f5544863d506aee/R/merge_rasters.R#L58-L81)]\n\n```{r}\nrlang::try_fetch(\n  f2(\"a\"),\n  non_numeric_x = function(...) \"We're running a completely different function now!\"\n)\n```\n\nLast but not least, classed errors help in package testing. A huge number of my tests are designed to make sure that conditions fire when they're supposed to -- bad inputs trigger errors, concerning outputs trigger warnings and so on. Using classed errors can help me make sure I'm triggering the error or warning that I want to, not just any random error or warning that might be lurking in my code.\n\nIf you're [using testthat's 3rd edition](https://testthat.r-lib.org/articles/third-edition.html), the `expect_condition()` set of functions (including `expect_message()`, `expect_warning()`, `expect_error()`) all share a `class` argument which will make sure the warning or error you're triggering is actually the one you expect:\n\n```{r}\ntestthat::local_edition(3)\ntestthat::expect_warning(f2(TRUE), class = \"non_numeric_x\")\n```\n\nIf our condition class doesn't match the expected class, these tests will fail:\n\n```{r}\ntry(testthat::expect_warning(f2(TRUE), class = \"wrong_class\"))\n```\n\nI'm a late adopter of classed conditions, only really systematically adopting them for [the new rsi package](https://github.com/Permian-Global-Research/rsi), but I've found them super useful so far and am planning to slowly use them more and more in the rest of my packages over time!\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":["sandstone","../../_variables.scss"],"title-block-banner":true,"title":"Classed conditions from rlang functions","description":"Improve your testing, your control flow, your programming life.","author":[{"name":"Mike Mahoney","url":{}}],"date":"2023-11-07","categories":["R","Tutorials"],"image":"banner.jpg"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}