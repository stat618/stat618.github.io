{
  "hash": "2be182a9c0e4824c7bd48334404e2e63",
  "result": {
    "markdown": "---\ntitle: \"Using in-line grouping to fit many models\"\ndescription: \"An alternative to nesting for fitting separate models to multiple groups.\"\nauthor:\n  - name: Mike Mahoney\n    url: {}\ndate: \"2023-04-01\"\ncategories: [\"R\", \"Tutorials\", \"Data science\"]\nimage: nests.jpg\nformat: \n  html:\n    toc: true\nengine: knitr\n---\n\n\nTim Tiefenbach [has a post](https://tim-tiefenbach.de/post/2023-dplyr-many-models/) on using dplyr and other tidymodels tools to fit many models in relatively few lines of code. Tim's post walks through a lot of interesting functions for more complicated model fitting, which I'm not going to talk about at all. What I want to talk about is that I recently realized I don't do much nesting in R anymore!\n\nThe building block in Tim's post uses the new-ish `dplyr::nest_by()` to create a nested data frame, then fits models using the new `data` list column:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::storms |> \n  dplyr::nest_by(status) |> \n  dplyr::mutate(\n    mod = list(lm(wind ~ pressure, data = data))\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 3\n# Rowwise:  status\n  status                                data mod   \n  <fct>                  <list<tibble[,12]>> <list>\n1 disturbance                     [146 × 12] <lm>  \n2 extratropical                 [2,068 × 12] <lm>  \n3 hurricane                     [4,684 × 12] <lm>  \n4 other low                     [1,405 × 12] <lm>  \n5 subtropical depression          [151 × 12] <lm>  \n6 subtropical storm               [292 × 12] <lm>  \n7 tropical depression           [3,525 × 12] <lm>  \n8 tropical storm                [6,684 × 12] <lm>  \n9 tropical wave                   [111 × 12] <lm>  \n```\n:::\n:::\n\n\nThis is a pattern I used to use all the time^[Using `tidyr::nest()`, though.] -- my [undergrad thesis](https://www.mm218.dev/posts/2019/03/) and [eventual first pub from the same](https://www.mm218.dev/papers/mahoney_stella_2020.pdf) were built from strings of nesting and unnesting data and models. But over the years, I've realized that you can often get the same results using grouped data frames in the place of nested ones, and have shifted to using `dplyr::summarise()` and friends instead of nesting:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::storms |> \n  dplyr::summarise(\n    mod = list(lm(wind ~ pressure, data = dplyr::pick(dplyr::everything()))),\n    .by = status\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 2\n  status                 mod   \n  <fct>                  <list>\n1 tropical depression    <lm>  \n2 tropical storm         <lm>  \n3 extratropical          <lm>  \n4 hurricane              <lm>  \n5 subtropical storm      <lm>  \n6 subtropical depression <lm>  \n7 disturbance            <lm>  \n8 other low              <lm>  \n9 tropical wave          <lm>  \n```\n:::\n:::\n\n\nNow, the obvious downside of using a grouped data frame instead of a nested one is that future function calls no longer have access to your raw data frame. The slightly less obvious downside is that the output of `dplyr::nest_by()` is a _rowwise_ data frame, which makes it easy to pass our model objects directly to other functions like `broom::tidy()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::storms |> \n  dplyr::nest_by(status) |> \n  dplyr::mutate(\n    mod = list(lm(wind ~ pressure, data = data)),\n    res = list(broom::tidy(mod))\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 4\n# Rowwise:  status\n  status                                data mod    res             \n  <fct>                  <list<tibble[,12]>> <list> <list>          \n1 disturbance                     [146 × 12] <lm>   <tibble [2 × 5]>\n2 extratropical                 [2,068 × 12] <lm>   <tibble [2 × 5]>\n3 hurricane                     [4,684 × 12] <lm>   <tibble [2 × 5]>\n4 other low                     [1,405 × 12] <lm>   <tibble [2 × 5]>\n5 subtropical depression          [151 × 12] <lm>   <tibble [2 × 5]>\n6 subtropical storm               [292 × 12] <lm>   <tibble [2 × 5]>\n7 tropical depression           [3,525 × 12] <lm>   <tibble [2 × 5]>\n8 tropical storm                [6,684 × 12] <lm>   <tibble [2 × 5]>\n9 tropical wave                   [111 × 12] <lm>   <tibble [2 × 5]>\n```\n:::\n:::\n\n\nThe outputs of the grouped data frame method are _not_ rowwise data frames, which means we need to use another function to iterate through each element of `mod`. I usually use `purrr::map()` for this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::storms |> \n  dplyr::summarise(\n    mod = list(lm(wind ~ pressure, data = dplyr::pick(dplyr::everything()))),\n    res = purrr::map(mod, broom::glance),\n    .by = status\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 3\n  status                 mod    res              \n  <fct>                  <list> <list>           \n1 tropical depression    <lm>   <tibble [1 × 12]>\n2 tropical storm         <lm>   <tibble [1 × 12]>\n3 extratropical          <lm>   <tibble [1 × 12]>\n4 hurricane              <lm>   <tibble [1 × 12]>\n5 subtropical storm      <lm>   <tibble [1 × 12]>\n6 subtropical depression <lm>   <tibble [1 × 12]>\n7 disturbance            <lm>   <tibble [1 × 12]>\n8 other low              <lm>   <tibble [1 × 12]>\n9 tropical wave          <lm>   <tibble [1 × 12]>\n```\n:::\n:::\n\n\nPart of the reason I use `purrr` for this is that `purrr` provides plenty of other helper functions for working with list columns; for instance, I tend to use `purrr::chuck()` to extract model fit statistics:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::storms |> \n  dplyr::summarise(\n    mod = list(lm(wind ~ pressure, data = dplyr::pick(dplyr::everything()))),\n    res = purrr::map(mod, broom::glance),\n    rsquared = purrr::map_dbl(res, purrr::chuck, \"r.squared\"),\n    .by = status\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 4\n  status                 mod    res               rsquared\n  <fct>                  <list> <list>               <dbl>\n1 tropical depression    <lm>   <tibble [1 × 12]>   0.0369\n2 tropical storm         <lm>   <tibble [1 × 12]>   0.485 \n3 extratropical          <lm>   <tibble [1 × 12]>   0.631 \n4 hurricane              <lm>   <tibble [1 × 12]>   0.807 \n5 subtropical storm      <lm>   <tibble [1 × 12]>   0.473 \n6 subtropical depression <lm>   <tibble [1 × 12]>   0.214 \n7 disturbance            <lm>   <tibble [1 × 12]>   0.299 \n8 other low              <lm>   <tibble [1 × 12]>   0.332 \n9 tropical wave          <lm>   <tibble [1 × 12]>   0.126 \n```\n:::\n:::\n\n\nAnyway -- there's nothing better or worse (as far as I'm concerned) with either nesting or grouping for fitting many models; I just think it's interesting that my personal style has shifted over time to use much more grouping, and much less nesting.\n\nAnd as I said at the start, Tim's post walks through a lot of interesting functions for more complicated model fitting, which I'm not going to talk about at all; [here's the link again if you're interested](https://tim-tiefenbach.de/post/2023-dplyr-many-models/).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}