{
  "hash": "626f272e5cad8d58b8f6b371924ec8c4",
  "result": {
    "markdown": "---\ntitle: \"Waywiser version 0.1.0 is now on CRAN!\"\ndescription: |\n  A new {yardstick} extension package for calculating spatial autocorrelation \n  in model residuals. \nauthor:\n  - name: Mike Mahoney\ndate: 2022-08-11\nformat:\n  html:\n    df-print: paged\ncategories: [R, waywiser, tidymodels, R packages, geospatial data]\n---\n\n\n![The waywiser hex sticker logo: a surveyor's wheel over the word \"waywiser\".](waywiser.svg)\n\nI've got a new package on CRAN! [waywiser](https://github.com/mikemahoney218/waywiser) is a [yardstick](https://yardstick.tidymodels.org/) extension package, providing functions for calculating spatial autocorrelation in model residuals in a way that cooperates with _most_ (but not all, see below) of the tidymodels framework.\n\nYou can install it from CRAN:\n\n```r\ninstall.packages(\"waywiser\")\n```\n\nOr the development version from [the package's GitHub page](https://github.com/mikemahoney218/waywiser):\n\n```r\n# install.packages(\"remotes\")\nremotes::install_github(\"mikemahoney218/waywiser\")\n```\n\nYou can use the package to estimate the spatial autocorrelation in residuals from any model -- just provide spatial data, a vector of your \"true\" measurements, and a vector of your predicted values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(waywiser)\n\n# Data on morality crimes in France:\ndata(guerry, package = \"sfdep\")\n\nww_global_moran(guerry, crime_pers, predict(lm(crime_pers ~ literacy, guerry)))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: multiple methods tables found for 'area'\n```\n:::\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\".metric\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\".estimator\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\".estimate\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"geometry\"],\"name\":[4],\"type\":[\"s_MULTIP\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"global_moran_i\",\"2\":\"standard\",\"3\":\"0.4115651506187433\",\"4\":\"<s_MULTIP>\"},{\"1\":\"global_moran_pvalue\",\"2\":\"standard\",\"3\":\"0.0000000007234758\",\"4\":\"<s_MULTIP>\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nUnder the hood, waywiser uses two functions (`ww_build_neighbors()` and `ww_build_weights()`) to build sensible, if likely non-ideal neighbor lists and spatial weights for your data. However, waywiser also lets you provide your own weights object to override the automatic calculations, or provide a function to calculate spatial weights based on the input data frame:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweights <- ww_build_weights(guerry)\n\nww_global_moran(\n  guerry, \n  crime_pers, \n  predict(lm(crime_pers ~ literacy, guerry)),\n  wt = weights\n)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\".metric\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\".estimator\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\".estimate\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"geometry\"],\"name\":[4],\"type\":[\"s_MULTIP\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"global_moran_i\",\"2\":\"standard\",\"3\":\"0.4115651506187433\",\"4\":\"<s_MULTIP>\"},{\"1\":\"global_moran_pvalue\",\"2\":\"standard\",\"3\":\"0.0000000007234758\",\"4\":\"<s_MULTIP>\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nProviding our own weights is necessary in order to use the `_vec()` versions of waywiser functions, which can be helpful for use in dplyr functions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# For the %>% pipe and mutate:\nlibrary(dplyr)\n# For visualization:\nlibrary(ggplot2)\n\nguerry %>%\n  mutate(pred = predict(lm(crime_pers ~ literacy, .)),\n         .estimate = ww_local_moran_i_vec(crime_pers, pred, weights)) %>% \n  sf::st_as_sf() %>% \n  ggplot(aes(fill = .estimate)) +\n  geom_sf() + \n  scale_fill_gradient2(\n    \"Moran's I\", \n    low = \"#018571\", \n    mid = \"white\", \n    high = \"#A6611A\"\n  ) + \n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nThe package currently provides three main indices of autocorrelation -- namely, Moran's I and Geary's C (both in global and local variants), as well as Getis-Ord's G and G* (only the local variant). \n\nThis first version of the package integrates well with the rest of the tidymodels framework, _except_ for the tune package (due to some difficulty in exposing either the original spatial data or the weights object to waywiser function while tuning a model). As a result, this version doesn't let you include these functions as metrics to calculate inside of a call to `fit_resamples()`.\n\nThe full list of features and documentation can be found on [the package's website](https://mikemahoney218.github.io/waywiser/). This has been a really fun package to work on; I'm excited to see it out in public, and will look forward to seeing if anyone else finds it useful!\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}