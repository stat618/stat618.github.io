{
  "hash": "c2a29066c4b3f273d28b5babda3a8fae",
  "result": {
    "markdown": "---\ntitle: \"Downloading STAC data using rsi when you've got a geographic CRS or don't want a composite.\"\ndescription: \"Methods for straying _slightly_ off the happy path: just say `NULL`.\"\nauthor:\n  - name: Mike Mahoney\n    url: {}\ndate: \"2023-11-21\"\ncategories: [R, Tutorials, Spatial, geospatial data, R packages]\nimage: banner.jpg\nformat: \n  html:\n    toc: true\nengine: knitr\n---\n\n\nA quick post today, inspired by [a GitHub issue](https://github.com/Permian-Global-Research/rsi/issues/6). \n\nI've been working recently on [the new rsi package](https://github.com/Permian-Global-Research/rsi) which helps you download, reproject, resample, mask, rescale, and composite data from STAC APIs.^[And calculate spectral indices from these data, and wrangle multiple rasters into a multi-band VRT -- it's a pretty neat package if I do say so myself.] The standard function interface does all of these steps: it grabs all the relevant files from your STAC source, reprojects them to match your AOI and desired resolution, masks and rescales the component files, and then merges them into a composite:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rsi)\nfuture::plan(\"multisession\")\n\naoi <- sf::st_point(c(-74.912131, 44.080410)) |> \n  sf::st_sfc() |> \n  sf::st_set_crs(4326) |> \n  sf::st_transform(3857) |> \n  sf::st_buffer(1000)\n\nstart_date <- \"2022-06-01\"\nend_date <- \"2022-07-01\"\n\nget_landsat_imagery(\n  aoi = aoi,\n  start_date = start_date,\n  end_date = end_date,\n  output_filename = tempfile(fileext = \".tif\")\n) |> \n  terra::rast() |> \n  terra::plot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nWhat if you want to skip some of these steps? For instance, if you try to call `get_landsat_imagery()` with an AOI in geographic coordinates, you'll get a warning (likely followed by an error) saying that you're asking to resample the data to 30 degree pixels, which is probably not what you wanted:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntry(\n  get_landsat_imagery(\n    aoi = sf::st_transform(aoi, 4326),\n    start_date = start_date,\n    end_date = end_date,\n    output_filename = tempfile(fileext = \".tif\")\n  )\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The default pixel size arguments are intended for use with projected AOIs, but `aoi` appears to be in geographic coordinates.\nℹ Pixel X size: 30. Pixel Y size: 30.\nℹ These dimensions will be interpreted in the same units as `aoi` (likely degrees), which may cause errors.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in CPL_gdalwarp(source, destination, options, oo, doo, config_options,\n: GDAL Error 1: Attempt to create 0x0 dataset is illegal,sizes must be larger\nthan zero.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Failed to download LC08_L2SP_015029_20220617_02_T1 from\n2022-06-17T15:45:03.055481Z\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in CPL_gdalwarp(source, destination, options, oo, doo, config_options,\n: GDAL Error 1: Attempt to create 0x0 dataset is illegal,sizes must be larger\nthan zero.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Failed to download LC09_L2SP_015029_20220609_02_T2 from\n2022-06-09T15:44:23.649712Z\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in CPL_gdalwarp(source, destination, options, oo, doo, config_options,\n: GDAL Error 1: Attempt to create 0x0 dataset is illegal,sizes must be larger\nthan zero.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Failed to download LC08_L2SP_015029_20220601_02_T1 from\n2022-06-01T15:44:51.569374Z\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in new_CppObject_xp(fields$.module, fields$.pointer, ...): GDAL Error\n4: /tmp/Rtmp7E1urK/filedddb8dfac1e.tif: No such file or directory\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nError : [rast] file does not exist: /tmp/Rtmp7E1urK/filedddb8dfac1e.tif\n```\n:::\n:::\n\n\nThat's coming from the resampling step of the function's workflow. Can we just skip that?\n\nShort answer: yes! If we pass `NULL` to the `pixel_*_size` arguments, we'll skip the resampling stage and instead download our data in its native resolution:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_landsat_imagery(\n  aoi = sf::st_transform(aoi, 4326),\n  start_date = start_date,\n  end_date = end_date,\n  pixel_x_size = NULL,\n  pixel_y_size = NULL,\n  output_filename = tempfile(fileext = \".tif\")\n) |> \n  terra::rast() |> \n  terra::plot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nThis is a pattern throughout the rsi API design: if you want to skip something, pass `NULL` to the relevant argument. For instance (and this is where [the GitHub issue comes in](https://github.com/Permian-Global-Research/rsi/issues/6)), if you want to not composite and instead download all the images within your spatiotemporal area of interest, we can pass `NULL` to the `composite_function` argument to skip compositing. I'll also skip masking by passing `NULL` to the `mask_function` argument, because otherwise a handful of these images are entirely masked out:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_landsat_imagery(\n  aoi = aoi,\n  start_date = start_date,\n  end_date = end_date,\n  output_filename = tempfile(fileext = \".tif\"),\n  composite_function = NULL,\n  mask_function = NULL # otherwise half of these images are blank\n) |> \n  lapply(terra::rast) |> \n  lapply(terra::plot)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-3.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\nNULL\n\n[[2]]\nNULL\n\n[[3]]\nNULL\n```\n:::\n:::\n\n\nHopefully this helps people use rsi to only perform the data wrangling steps they want!\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}